/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package assaultonpa13;

import java.io.IOException;
import java.util.Stack;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

@SuppressWarnings("serial")
public final class PA13GUI extends javax.swing.JFrame {

  /**
   * Creates new form PA13GUI
   */

  Boolean LossFlag;
  Overview Status;
  Show Cooking;
  Show Driving;
  Show Fishing;
  Show Jazz;
  Show SciFi;
  Show Survival;
  Stack<Show> Setlist;
  private javax.swing.JButton Appease;
  private javax.swing.JButton FixBarr;
  private javax.swing.JTextPane FlavorText;
  private javax.swing.JButton Hire;
  private javax.swing.JButton ImpBarr;
  private javax.swing.JCheckBox JazzCheck;
  private javax.swing.JButton NextDay;
  private javax.swing.JLabel appCost;
  private javax.swing.JLabel barrCost;
  private javax.swing.JCheckBox cookCheck;
  private javax.swing.JCheckBox driveCheck;
  private javax.swing.JCheckBox fishCheck;
  private javax.swing.JLabel fixCost;
  private javax.swing.JLabel guardVal;
  private javax.swing.JLabel healthVal;
  private javax.swing.JLabel hireCost;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JLabel moneyVal;
  private javax.swing.JLabel protVal;
  private javax.swing.JCheckBox sciFiCheck;
  private javax.swing.JCheckBox survivalCheck;

  public PA13GUI() throws IOException {
    initComponents();// Text in this function is protected by the NetBeans IDE,
                     // hence the redundant assignments
    Cooking = new Show("Cooking with Chelsea", "She makes cooking fun!", "Chelsea Candles");
    Driving = new Show("High Speed", "Don't try this at home.", "Jimmy March");
    SciFi = new Show("Science Fiction Revue", "Science Fiction for this galaxy... and beyond.",
        "Jules Isaacs");
    Fishing = new Show("The Joy of Fishing", "The reel scoop on fishing", "Alex Birch");
    Survival = new Show("SURVIVE!", "When all else fails", "Burt Gunnar");
    Jazz = new Show("Jumping Jazz Jukebox", "Jazz hits from the golden age and today",
        "Ryan Sanders");
    Status = new Overview();
    Setlist = new Stack<Show>();
    Status.setFlavorText(FlavorText.getText());
    LossFlag = false;

    Cooking.readOutcomes("src/assaultonpa13/CookOut.txt");
    Driving.readOutcomes("src/assaultonpa13/DriveOut.txt");
    SciFi.readOutcomes("src/assaultonpa13/SciOut.txt");
    Fishing.readOutcomes("src/assaultonpa13/FishOut.txt");
    Survival.readOutcomes("src/assaultonpa13/SurvOut.txt");
    Jazz.readOutcomes("src/assaultonpa13/JazzOut.txt");
    update();

  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    FlavorText = new javax.swing.JTextPane();
    FixBarr = new javax.swing.JButton();
    ImpBarr = new javax.swing.JButton();
    Hire = new javax.swing.JButton();
    Appease = new javax.swing.JButton();
    NextDay = new javax.swing.JButton();
    cookCheck = new javax.swing.JCheckBox();
    driveCheck = new javax.swing.JCheckBox();
    sciFiCheck = new javax.swing.JCheckBox();
    survivalCheck = new javax.swing.JCheckBox();
    fishCheck = new javax.swing.JCheckBox();
    JazzCheck = new javax.swing.JCheckBox();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    healthVal = new javax.swing.JLabel();
    moneyVal = new javax.swing.JLabel();
    guardVal = new javax.swing.JLabel();
    protVal = new javax.swing.JLabel();
    fixCost = new javax.swing.JLabel();
    barrCost = new javax.swing.JLabel();
    hireCost = new javax.swing.JLabel();
    appCost = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Assault on PA13");

    FlavorText.setEditable(false);
    FlavorText.setText("You are Barry Salmon, director of programming for channel PA13, the "
        + "nation's worst received public access channel. Today, the protesters across the street threw a "
        + "brick through the window. It's time to take charge of this station. Raise barricades, "
        + "hire security, and keep the cameras rolling. The more hours of programming, the more donations "
        + "you stand to receive, but the bigger the risk of one of your hosts mouthing off and angering the "
        + "public.");
    jScrollPane1.setViewportView(FlavorText);

    FixBarr.setText("Fix Barricades");
    FixBarr.setToolTipText("Return barricades to max health");
    FixBarr.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fixBarrActionPerformed();
      }
    });

    ImpBarr.setText("Improve Barricades");
    ImpBarr.setToolTipText("Increase barricades max health");
    ImpBarr.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        impBarrActionPerformed();
      }
    });

    Hire.setText("Hire Guard");
    Hire.setToolTipText("Hire another guard");
    Hire.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        hireActionPerformed();
      }
    });

    Appease.setText("Appease Protesters");
    Appease.setToolTipText("Make them happy");
    Appease.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        appeaseActionPerformed();
      }
    });

    NextDay.setText("Next Day");
    NextDay.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        nextDayActionPerformed();
      }
    });

    cookCheck.setText("Cooking With Chelsea");
    cookCheck.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cookCheckActionPerformed();
      }
    });

    driveCheck.setText("High Speed");
    driveCheck.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        driveCheckActionPerformed();
      }
    });

    sciFiCheck.setText("Sci-Fi Revue");
    sciFiCheck.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sciFiCheckActionPerformed();
      }
    });

    survivalCheck.setText("SURVIVE!");
    survivalCheck.setToolTipText("");
    survivalCheck.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        survivalCheckActionPerformed();
      }
    });

    fishCheck.setText("The Joy of Fishing");
    fishCheck.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fishCheckActionPerformed();
      }
    });

    JazzCheck.setText("Jumping Jazz Jukebox");
    JazzCheck.setToolTipText("");
    JazzCheck.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jazzCheckActionPerformed();
      }
    });

    jLabel1.setText("Barricade Health");

    jLabel2.setText("Money");

    jLabel3.setText("Guards");

    jLabel4.setText("Protesters");
    jLabel4.setToolTipText("");

    healthVal.setText("Health");

    moneyVal.setText("Money");

    guardVal.setText("Guards");

    protVal.setText("Protesters");

    fixCost.setText("jLabel5");

    barrCost.setText("jLabel6");

    hireCost.setText("jLabel7");

    appCost.setText("jLabel8");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
            layout.createSequentialGroup().addContainerGap(217, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220,
                    javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        .addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout
            .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(survivalCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 131,
                javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(fishCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 131,
                javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(sciFiCheck).addComponent(JazzCheck)
            .addGroup(layout.createSequentialGroup().addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(healthVal))
            .addGroup(layout.createSequentialGroup().addComponent(jLabel4).addGap(39, 39, 39)
                .addComponent(protVal))
            .addGroup(layout.createSequentialGroup().addGap(34, 34, 34).addComponent(NextDay))
            .addGroup(layout.createSequentialGroup().addComponent(jLabel2).addGap(57, 57, 57)
                .addComponent(moneyVal))
            .addGroup(layout.createSequentialGroup().addComponent(jLabel3).addGap(55, 55, 55)
                .addComponent(guardVal))
            .addGroup(layout.createSequentialGroup()
                .addComponent(FixBarr, javax.swing.GroupLayout.PREFERRED_SIZE, 145,
                    javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fixCost))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout
                    .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(ImpBarr, javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Hire, javax.swing.GroupLayout.DEFAULT_SIZE,
                    javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Appease, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))
                .addGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(appCost))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                            layout.createSequentialGroup().addGap(10, 10, 10).addGroup(layout
                                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(barrCost).addComponent(hireCost)))))
            .addGroup(layout.createSequentialGroup().addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cookCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 145,
                        javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(driveCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 100,
                        javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
    layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup().addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1).addComponent(healthVal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2).addComponent(moneyVal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3).addComponent(guardVal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4).addComponent(protVal)).addGap(28, 28, 28)
                .addComponent(NextDay).addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FixBarr).addComponent(fixCost))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                    javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ImpBarr).addComponent(barrCost))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Hire).addComponent(hireCost))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Appease).addComponent(appCost))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JazzCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sciFiCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fishCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(survivalCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(driveCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cookCheck)).addComponent(jScrollPane1))
            .addGap(27, 27, 27)));

    pack();
  }// </editor-fold>//GEN-END:initComponents

  public void appeaseActionPerformed() {/*
                                        * GEN-FIRST:
                                        * event_AppeaseActionPerformed
                                        */
    if (Status.checkMoney(Status.getAppCost()) && (!LossFlag)) {
      Random rand = new Random();
      Status.setProtesters(
          (int) (Status.getProtesters() - ((rand.nextFloat() % .5) * Status.getProtesters())));
      Status.setMoney(Status.getMoney() - Status.getAppCost());
      Status.setAppCost(Status.getAppCost() * 10);
      update();
    }
  }// GEN-LAST:event_AppeaseActionPerformed

  // Pays for and restores health of barricades to current maximum
  public void fixBarrActionPerformed() {/*
                                        * GEN-FIRST:
                                        * event_FixBarrActionPerformed
                                        */
    if (Status.checkMoney(Status.getFixCost()) && (!LossFlag)) {
      if (Status.getHealth() != Status.getHealthMax()) {
        Status.setMoney(Status.getMoney() - Status.getFixCost());
        Status.setHealth(Status.getHealthMax());
        update();
      }
    }
  }// GEN-LAST:event_FixBarrActionPerformed

  // Pays for and hires another guard
  public void hireActionPerformed() {/*
                                        * GEN-FIRST: event_HireActionPerformed
                                        */
    if (Status.checkMoney(Status.getHireCost()) && (!LossFlag)) {
      Status.setMoney(Status.getMoney() - Status.getHireCost());
      Status.setGuards(Status.getGuards() + 1);
      Status.setHireCost(Status.getHireCost() + 100);
      update();
    }
  }// GEN-LAST:event_HireActionPerformed

  /*
   * Pays for and adds maximum health to the barricades, after checking to make
   * sure there is enough money
   */
  public void impBarrActionPerformed() {/*
                                        * GEN-FIRST:
                                        * event_ImpBarrActionPerformed
                                        */
    if (Status.checkMoney(Status.getImpBarrCost()) && !LossFlag) {
      Status.setMoney(Status.getMoney() - Status.getImpBarrCost());
      if (Status.getHealth() == Status.getHealthMax()) {
        Status.setHealth((int) (Status.getHealthMax() * 1.25));
      }
      Status.setHealthMax((int) (Status.getHealthMax()
          * 1.25)); /*
                     * Intentionally keeping health variables as integers
                     */
      Status.setFixCost((int) (Status.getFixCost() * 1.25));
      Status.setImpBarrCost(Status.getImpBarrCost() * 2);
      update();
    }
  }// GEN-LAST:event_ImpBarrActionPerformed

  /*
   * Processes the outcome of all selected programs, updates the game with the
   * results such as money or protester change
   */
  public void nextDayActionPerformed() {/*
                                        * GEN-FIRST:
                                        * event_NextDayActionPerformed
                                        */
    if (!LossFlag) {
      if (Setlist.isEmpty()) {
        FlavorText.setText("The shows must go on.");
      } else {
        Status.setDay(Status.getDay() + 1);
        Outcome res;
        int attackers;
        int damage;
        Random rand = new Random();
        attackers = rand.nextInt(Status.getProtesters());
        damage = 5 * (attackers
            - Status.getGuards()); /*
                                    * Where the "attack" is actually calculated
                                    */
        if (damage < 0) {
          damage = 0; // Ensuring damage bottoms out at 0.
        }
        Status.setHealth(Status.getHealth() - damage);
        if (Status.getHealth() <= 0) { // lose condition here
          LossFlag = true;
          Status.setHealth(0);
        }
        Status.setFlavorText("Day " + Status.getDay() + "\n");
        while (!Setlist.isEmpty()) {
          String title = Setlist.lastElement().getTitle();
          res = Setlist.pop().getResult(Math.abs(rand.nextInt()));
          switch (title) {
          case "Cooking with Chelsea":
            cookCheck.setSelected(false);
            break;
          case "High Speed":
            driveCheck.setSelected(false);
            break;
          case "The Joy of Fishing":
            fishCheck.setSelected(false);
            break;
          case "Jumping Jazz Jukebox":
            JazzCheck.setSelected(false);
            break;
          case "Science Fiction Revue":
            sciFiCheck.setSelected(false);
            break;
          default:
            survivalCheck.setSelected(false);
            break;
          }
          Status.setMoney(Status.getMoney() + res.getIncome());
          Status.setProtesters(Status.getProtesters() + res.getAnger());
          Status.setFlavorText(
              Status.getFlavorText() + title + ":\n" + res.getDescription() + "\n\n");
        }
          if (attackers == 1){
            Status.setFlavorText(Status.getFlavorText() + attackers + " protester attacked the " + "building.\n");
          }else{
            Status.setFlavorText(Status.getFlavorText() + attackers + " protesters attacked the " + "building.\n");
          }
        if (LossFlag == true) {
          Status.setFlavorText(
              Status.getFlavorText() + "\n The station has been ransacked," + " you lose.");
        }
        update();
      }
    }
  }// GEN-LAST:event_NextDayActionPerformed

  // Updates the gui with all of the current values
  public void update() {
    healthVal.setText(Integer.toString(Status.getHealth()));
    moneyVal.setText(Integer.toString(Status.getMoney()));
    guardVal.setText(Integer.toString(Status.getGuards()));
    protVal.setText(Integer.toString(Status.getProtesters()));
    fixCost.setText(Integer.toString(Status.getFixCost()));
    barrCost.setText(Integer.toString(Status.getImpBarrCost()));
    hireCost.setText(Integer.toString(Status.getHireCost()));
    appCost.setText(Integer.toString(Status.getAppCost()));
    FlavorText.setText(Status.getFlavorText());
  }

  // Adds and removes the cooking show from the list of shows playing that night
  public void cookCheckActionPerformed() {/*
                                        * GEN-FIRST:
                                        * event_cookCheckActionPerformed
                                        */
    if (!Setlist.contains(Cooking) && (!LossFlag)) {
      Setlist.add(Cooking);// TODO add your handling code here:
    } else if (!LossFlag) {
      Setlist.remove(Cooking);
    }
  }// GEN-LAST:event_cookCheckActionPerformed

  // Adds and removes the driving show from the list of shows playing that night
  public void driveCheckActionPerformed() {/*
                                        * GEN-FIRST:
                                        * event_driveCheckActionPerformed
                                        */
    if (!Setlist.contains(Driving) && (!LossFlag)) {
      Setlist.add(Driving);// TODO add your handling code here:
    } else if (!LossFlag) {
      Setlist.remove(Driving);
    }
  }// GEN-LAST:event_driveCheckActionPerformed

  // Adds and removes the fishing show from the list of shows playing that night
  public void fishCheckActionPerformed() {/*
                                        * GEN-FIRST:
                                        * event_fishCheckActionPerformed
                                        */
    if (!Setlist.contains(Fishing) && (!LossFlag)) {
      Setlist.add(Fishing);// TODO add your handling code here:
    } else if (!LossFlag) {
      Setlist.remove(Fishing);
    }
  }// GEN-LAST:event_fishCheckActionPerformed

  // Adds and removes the jazz show from the list of shows playing that night
  public void jazzCheckActionPerformed() {/*
                                        * GEN-FIRST:
                                        * event_JazzCheckActionPerformed
                                        */
    if (!Setlist.contains(Jazz) && (!LossFlag)) {
      Setlist.add(Jazz);// TODO add your handling code here:
    } else if (!LossFlag) {
      Setlist.remove(Jazz);
    }
  }// GEN-LAST:event_JazzCheckActionPerformed

  // Adds and removes the SciFi show from the list of shows playing that night
  public void sciFiCheckActionPerformed() {/*
                                        * GEN-FIRST:
                                        * event_sciFiCheckActionPerformed
                                        */
    if (!Setlist.contains(SciFi) && (!LossFlag)) {
      Setlist.add(SciFi);// TODO add your handling code here:
    } else if (!LossFlag) {
      Setlist.remove(SciFi);
    }
  }// GEN-LAST:event_sciFiCheckActionPerformed

  // Adds or removes the Survival show from the list of shows being aired that
  // night.
  public void survivalCheckActionPerformed() {/*
                                        * GEN-FIRST:
                                        * event_survivalCheckActionPerformed
                                        */
    if (!Setlist.contains(Survival) && (!LossFlag)) {
      Setlist.add(Survival);// TODO add your handling code here:
    } else {
      Setlist.remove(Survival);
    }
  }// GEN-LAST:event_survivalCheckActionPerformed

  /**
   * @param args
   *          the command line arguments
   */

  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
    // (optional) ">
    /*
     * If Nimbus (introduced in Java SE 6) is not available, stay with the
     * default look and feel. For details see
     * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
          .getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(PA13GUI.class.getName())
          .log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(PA13GUI.class.getName())
          .log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(PA13GUI.class.getName())
          .log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(PA13GUI.class.getName())
          .log(java.util.logging.Level.SEVERE, null, ex);
    }
    // </editor-fold>
    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        try {
          new PA13GUI().setVisible(true);
        } catch (IOException ex) {
          Logger.getLogger(PA13GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
    });
  }
}
